/*
 * geniusreferrals_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/17/2017
 */
package bonuses_pkg


import(
	"geniusreferrals_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"geniusreferrals_lib"
	"geniusreferrals_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type BONUSES_IMPL struct { }

/**
 * Get the list of bonuses for a given account.
 * @param    string         accountSlug      parameter: Required
 * @param    *int64         page             parameter: Optional
 * @param    *int64         limit            parameter: Optional
 * @param    *string        filter           parameter: Optional
 * @param    *string        sort             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *BONUSES_IMPL) GetBonuses (
            accountSlug string,
            page *int64,
            limit *int64,
            filter *string,
            sort *string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "page" : page,
        "limit" : limit,
        "filter" : filter,
        "sort" : sort,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Make an attempt to give a bonus for to the advocate's referrer. The system processes the given advocate (referral) and creates a bonus for the advocate's referrer if is needed. All restrictions set on the campaigns for this account will be check out before giving the bonus to the advocate's referrer.
 * @param    string                         accountSlug      parameter: Required
 * @param    *models_pkg.BonusesForm        bonusesForm      parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *BONUSES_IMPL) PostBonuses (
            accountSlug string,
            bonusesForm *models_pkg.BonusesForm) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, bonusesForm)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Check if there is a bonus to be given to the advocate. Allows the clients to check if there is a bonus to be given, it simulates the behaivor of a POST request to /accounts/{account_slug}/bonuses resource. This resource is idempotent.
 * @param    string         accountSlug        parameter: Required
 * @param    string         advocateToken      parameter: Required
 * @param    string         reference          parameter: Required
 * @param    float64        paymentAmount      parameter: Required
 * @return	Returns the []byte response from the API call
 */
func (me *BONUSES_IMPL) GetBonusesCheckup (
            accountSlug string,
            advocateToken string,
            reference string,
            paymentAmount float64) ([]byte, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses/checkup"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "advocate_token" : advocateToken,
        "reference" : reference,
        "payment_amount" : paymentAmount,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    return _response.RawBody, nil
}

/**
 * Force the system to give a bonus to an advocate. The system will not take into account the restriccions specified on the campaigns.
 * @param    string                          accountSlug      parameter: Required
 * @param    *models_pkg.BonusesForm1        bonusForm        parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *BONUSES_IMPL) PostBonusesForce (
            accountSlug string,
            bonusForm *models_pkg.BonusesForm1) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses/force"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, bonusForm)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get a bonus request trace.
 * @param    string        accountSlug      parameter: Required
 * @param    int64         traceId          parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *BONUSES_IMPL) GetBonusesTrace (
            accountSlug string,
            traceId int64) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses/traces/{trace_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "trace_id" : traceId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete a bonus
 * @param    string        accountSlug      parameter: Required
 * @param    int64         bonusId          parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *BONUSES_IMPL) DeleteBonus (
            accountSlug string,
            bonusId int64) (error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses/{bonus_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "bonus_id" : bonusId,
    })
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Delete(_queryBuilder, headers, nil)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil
}

/**
 * Get a bonus by a given id.
 * @param    string        accountSlug      parameter: Required
 * @param    int64         bonusId          parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *BONUSES_IMPL) GetBonus (
            accountSlug string,
            bonusId int64) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses/{bonus_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "bonus_id" : bonusId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get the list of bonuses traces (audit trail). Every time the system tries to give a bonus the an advocate a new trace is created.
 * @param    string         accountSlug      parameter: Required
 * @param    *int64         page             parameter: Optional
 * @param    *int64         limit            parameter: Optional
 * @param    *string        filter           parameter: Optional
 * @param    *string        sort             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *BONUSES_IMPL) GetBonusesTraces (
            accountSlug string,
            page *int64,
            limit *int64,
            filter *string,
            sort *string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/bonuses/traces"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "page" : page,
        "limit" : limit,
        "filter" : filter,
        "sort" : sort,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

