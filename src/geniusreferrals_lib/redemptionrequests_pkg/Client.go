/*
 * geniusreferrals_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/17/2017
 */
package redemptionrequests_pkg


import(
	"geniusreferrals_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"geniusreferrals_lib"
	"geniusreferrals_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type REDEMPTIONREQUESTS_IMPL struct { }

/**
 * Get a redemption request status.
 * @param    string        redemptionRequestStatusSlug        parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) GetRedemptionRequestStatus (
            redemptionRequestStatusSlug string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/utilities/redemption-request-statuses/{redemption_request_status_slug}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "redemption_request_status_slug" : redemptionRequestStatusSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get redemption request statuses.
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) GetRedemptionRequestStatuses () (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/utilities/redemption-request-statuses"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get a redemption request action.
 * @param    string        redemptionRequestActionSlug        parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) GetRedemptionRequestAction (
            redemptionRequestActionSlug string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/utilities/redemption-request-actions/{redemption_request_action_slug}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "redemption_request_action_slug" : redemptionRequestActionSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get redemption request actions.
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) GetRedemptionRequestActions () (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/utilities/redemption-request-actions"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Redeem a redemption request. After the redemption request is created it needs to be redeemed. This will deduct the amount of the advocate unclaimed balance and move the request to the completed state.
 * @param    string        accountSlug               parameter: Required
 * @param    int64         redemptionRequestId       parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) PatchRedemptionRequest (
            accountSlug string,
            redemptionRequestId int64) (error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/redemption-requests/{redemption_request_id}/redemption"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "redemption_request_id" : redemptionRequestId,
    })
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Patch(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil
}

/**
 * Create a redemption request.
 * @param    string                                   accountSlug                 parameter: Required
 * @param    *models_pkg.RedemptionRequestForm        redemptionRequestForm       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) PostRedemptionRequest (
            accountSlug string,
            redemptionRequestForm *models_pkg.RedemptionRequestForm) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/redemption-requests"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, redemptionRequestForm)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get a redemption request by a given id.
 * @param    string        accountSlug               parameter: Required
 * @param    string        redemptionRequestId       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) GetRedemptionRequest (
            accountSlug string,
            redemptionRequestId string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/redemption-requests/{redemption_request_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "redemption_request_id" : redemptionRequestId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get the list of redemption requests.
 * @param    string         accountSlug      parameter: Required
 * @param    *string        page             parameter: Optional
 * @param    *string        limit            parameter: Optional
 * @param    *string        filter           parameter: Optional
 * @param    *string        sort             parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *REDEMPTIONREQUESTS_IMPL) GetRedemptionRequests (
            accountSlug string,
            page *string,
            limit *string,
            filter *string,
            sort *string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/redemption-requests"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "page" : page,
        "limit" : limit,
        "filter" : filter,
        "sort" : sort,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

