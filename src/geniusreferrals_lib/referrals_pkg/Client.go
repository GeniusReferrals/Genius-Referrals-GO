/*
 * geniusreferrals_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 02/18/2017
 */
package referrals_pkg


import(
	"geniusreferrals_lib/models_pkg"
	"github.com/apimatic/unirest-go"
	"geniusreferrals_lib"
	"geniusreferrals_lib/apihelper_pkg"
)
/*
 * Client structure as interface implementation
 */
type REFERRALS_IMPL struct { }

/**
 * Get a referral origin by a given slug.
 * @param    string        referralOriginSlug       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REFERRALS_IMPL) GetReferralOrigin (
            referralOriginSlug string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/utilities/referral-origins/{referral_origin_slug}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "referral_origin_slug" : referralOriginSlug,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get referral origins. This is needed when creating (POST) a new referral, as referral_origin_slug refers to one of this origins.
 * @return	Returns the interface{} response from the API call
 */
func (me *REFERRALS_IMPL) GetReferralOrigins () (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/utilities/referral-origins"

    //variable to hold errors
    var err error = nil
    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Get a referral by a given id.
 * @param    string        accountSlug        parameter: Required
 * @param    string        advocateToken      parameter: Required
 * @param    string        referralId         parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REFERRALS_IMPL) GetReferral (
            accountSlug string,
            advocateToken string,
            referralId string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/advocates/{advocate_token}/referrals/{referral_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "advocate_token" : advocateToken,
        "referral_id" : referralId,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Delete a referral.
 * @param    string        accountSlug        parameter: Required
 * @param    string        advocateToken      parameter: Required
 * @param    string        referralId         parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *REFERRALS_IMPL) DeleteReferral (
            accountSlug string,
            advocateToken string,
            referralId string) (error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/advocates/{advocate_token}/referrals/{referral_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "advocate_token" : advocateToken,
        "referral_id" : referralId,
    })
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Delete(_queryBuilder, headers, nil)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil
}

/**
 * Create a new referral.
 * @param    string                          accountSlug        parameter: Required
 * @param    string                          advocateToken      parameter: Required
 * @param    *models_pkg.ReferralForm        referralForm       parameter: Required
 * @return	Returns the interface{} response from the API call
 */
func (me *REFERRALS_IMPL) PostReferral (
            accountSlug string,
            advocateToken string,
            referralForm *models_pkg.ReferralForm) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/advocates/{advocate_token}/referrals"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "advocate_token" : advocateToken,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Post(_queryBuilder, headers, referralForm)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

/**
 * Update a referral.
 * @param    string                          accountSlug        parameter: Required
 * @param    string                          advocateToken      parameter: Required
 * @param    string                          referralId         parameter: Required
 * @param    *models_pkg.ReferralForm        referralForm       parameter: Required
 * @return	Returns the  response from the API call
 */
func (me *REFERRALS_IMPL) PutReferral (
            accountSlug string,
            advocateToken string,
            referralId string,
            referralForm *models_pkg.ReferralForm) (error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/advocates/{advocate_token}/referrals/{referral_id}"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "advocate_token" : advocateToken,
        "referral_id" : referralId,
    })
    if err != nil {
        //error in template param handling
        return err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "content-type" : "application/json; charset=utf-8",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Put(_queryBuilder, headers, referralForm)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return err
    }

    //returning the response
    return nil
}

/**
 * Get the list of referrals for a given advocate.
 * @param    string         accountSlug        parameter: Required
 * @param    string         advocateToken      parameter: Required
 * @param    *int64         page               parameter: Optional
 * @param    *int64         limit              parameter: Optional
 * @param    *string        filter             parameter: Optional
 * @param    *string        sort               parameter: Optional
 * @return	Returns the interface{} response from the API call
 */
func (me *REFERRALS_IMPL) GetReferrals (
            accountSlug string,
            advocateToken string,
            page *int64,
            limit *int64,
            filter *string,
            sort *string) (interface{}, error) {
        //the base uri for api requests
    _queryBuilder := geniusreferrals_lib.BASEURI;

    //prepare query string for API call
   _queryBuilder = _queryBuilder + "/accounts/{account_slug}/advocates/{advocate_token}/referrals"

    //variable to hold errors
    var err error = nil
    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithTemplateParameters(_queryBuilder, map[string]interface{} {
        "account_slug" : accountSlug,
        "advocate_token" : advocateToken,
    })
    if err != nil {
        //error in template param handling
        return nil, err
    }

    //process optional query parameters
    _queryBuilder, err = apihelper_pkg.AppendUrlWithQueryParameters(_queryBuilder, map[string]interface{} {
        "page" : apihelper_pkg.ToString(*page, "1"),
        "limit" : apihelper_pkg.ToString(*limit, "10"),
        "filter" : filter,
        "sort" : sort,
    })
    if err != nil {
        //error in query param handling
        return nil, err
    }

    //validate and preprocess url
    _queryBuilder, err = apihelper_pkg.CleanUrl(_queryBuilder)
    if err != nil {
        //error in url validation or cleaning
        return nil, err
    }

    //prepare headers for the outgoing request
    headers := map[string]interface{} {
        "user-agent" : "APIMATIC 2.0",
        "accept" : "application/json",
        "X-Auth-Token" : geniusreferrals_lib.Config.XAuthToken,
    }

    //prepare API request
    _request := unirest.Get(_queryBuilder, headers)
    //and invoke the API call request to fetch the response
    _response, err := unirest.AsString(_request);
    if err != nil {
        //error in API invocation
        return nil, err
    }

    //error handling using HTTP status codes
    if (_response.Code == 401) {
        err = apihelper_pkg.NewAPIError("You are not authenticated", _response.Code, _response.RawBody)
    } else if (_response.Code == 403) {
        err = apihelper_pkg.NewAPIError("User not authorized to perform the operation", _response.Code, _response.RawBody)
    } else if (_response.Code == 404) {
        err = apihelper_pkg.NewAPIError("Resource not found", _response.Code, _response.RawBody)
    } else if (_response.Code < 200) || (_response.Code > 206) { //[200,206] = HTTP OK
            err = apihelper_pkg.NewAPIError("HTTP Response Not OK", _response.Code, _response.RawBody)
        }
    if(err != nil) {
        //error detected in status code validation
        return nil, err
    }

    //returning the response
    var retVal interface{}
    err = json.Unmarshal(_response.RawBody, &retVal)

    if err != nil {
        //error in parsing
        return nil, err
    }
    return retVal, nil
}

